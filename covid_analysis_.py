# -*- coding: utf-8 -*-
"""covid analysis .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tfwTTzMmKbijOhZ5B33cRSllH2HHQga9
"""

import pandas as pd 
from matplotlib import pyplot as plt
import seaborn as sns
import datetime as dt #for various date time analysis
import numpy as np



df=pd.read_csv('/content/covid_19_india.csv',parse_dates=['Date'],dayfirst=True)
df.head()

df.columns

df=df.drop(['Sno','Time','ConfirmedIndianNational','ConfirmedForeignNational'],axis=1)
df.head(2)

df.columns=['date', 'state', 'cured','deaths', 'confirmed']
#changing the names in small letters to make it easier

df.head(2)

df.tail(2)

patriculardate=df[df.date=='2021-01-31']
patriculardate.head()
#on a particular date how amny cases are there

max_confirmed_cases=patriculardate.sort_values(by='confirmed',ascending=False)# sorting confirmed cases on a particular date 
max_confirmed_cases.head()

top_states_confirmed=max_confirmed_cases[0:6]
top_states_confirmed.head(5)
top_states_confirmed.shape



ax = plt.subplots(figsize=(10, 10))
sns.barplot(x='state',y='confirmed',data=top_states_confirmed)
plt.show()



max_deaths_cases=patriculardate.sort_values(by='deaths',ascending=False)# sorting confirmed cases on a particular date 
max_deaths_cases.head()

top_states_deaths=max_deaths_cases[0:6]
top_states_deaths.head(5)
top_states_deaths.shape



ax = plt.subplots(figsize=(15, 10))
sns.barplot(x='state',y='deaths',data=top_states_deaths)
plt.show()

max_cured_cases=patriculardate.sort_values(by='cured',ascending=False)# sorting confirmed cases on a particular date 
max_cured_cases.head()

top_states_cured=max_cured_cases[0:6]
top_states_cured.head(5)
top_states_cured.shape

ax = plt.subplots(figsize=(20,10))
sns.barplot(x='state',y='cured',data=top_states_cured)
plt.show()

#maharsathra first 3 in all cases 
#we start analysing the states 
#from all these we found hat maharshtra found covid after 40 days of kerala but it lead in the covid cases

df.head()



maha=df[df.state=='Maharashtra']
maha.head(2)

plt.plot()

maha.date

ax = plt.subplots(figsize=(10,10))
sns.lineplot(x='date',y='confirmed',data=maha,color='g')
plt.show()

ax = plt.subplots(figsize=(10,10))
sns.lineplot(x='date',y='deaths',data=maha, color='red')
plt.show()

pp = sns.lineplot(data=maha,x='date',y='cured',color='Green')
sns.lineplot(x='date',y='deaths',data=maha, color='red')
pp = sns.lineplot(data=maha,x='date',y='confirmed',color='black')

sns.lineplot(x_test,y_test)



from sklearn.model_selection import train_test_split

maha.describe()

maha['date']=maha['date'].map(dt.datetime.toordinal)

maha.head(2)

maha.describe()



x=maha['date']
y=maha['confirmed']

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=.2)

from sklearn.preprocessing import StandardScaler
sc=StandardScaler()
x_train=np.array(x_train).reshape(-1,1)
x_test=np.array(y_test).reshape(-1,1)
x_train=sc.fit_transform(x_train)
x_test=sc.fit_transform(x_test)

x_train

x_test

from sklearn.ensemble import RandomForestRegressor
rf=RandomForestRegressor()

rf.fit(x_train,y_train)

y_pred1=rf.predict(x_test)
y_pred= pd.DataFrame(y_pred1)
y_pred1

y_pred1.shape

y_test.shape

sns.lineplot(x_test,y_test,color='r')
sns.lineplot(x_test,y_pred1,color='blue')

y_test=pd.DataFrame(y_test)
y_test.shape

y_test=np.array(y_test).reshape(-1,1)
y_test.shape

y_test=np.array(y_test)
y_test.shape



y_pred=np.array(y_pred1).reshape(-1,1)
y_pred.shape

pp = sns.lineplot(data=maha,x='date',y='confirmed',ax=ax,color='Blue')
pp = sns.lineplot(data=maha,x='date',y='cured',ax=ax,color='Green')
pp = sns.lineplot(data=maha,x='date',y='deaths',ax=ax,color='Red')

from sklearn import metrics

print('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred))
print('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred))
print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))

from sklearn.metrics import r2_score
r2_score(y_test, y_pred)
#analyissi was done using the randomforstregression
#found that covid variant in maharashtra was more lethal in whole india.
#kerala recived the first case of covid but its peak was far behind the maharashtra where it later.
#r2 score was achieved as .89

y_pred=pd.Dataframe

ax = plt.subplots(figsize=(20,10))
sns.lineplot(x='date',y='y_pred',data=maha,color='g')
plt.show()

from sklearn.linear_model import LinearRegression
lr=LinearRegression()

lr.fit(np.array(x_train).reshape(-1,1),np.array(y_train).reshape(-1,1))



y_pred1=lr.predict(np.array(x_test).reshape(-1,1))
y_pred= pd.DataFrame(y_pred1)
y_pred

y_pred.head(2)

y_test.head(2)

from sklearn import metrics

print('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred))
print('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred))
print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))



r2_score(y_test, y_pred)

from sklearn.svm import SVR
svr=SVR()

svr.fit(np.array(x_train).reshape(-1,1),np.array(y_train).reshape(-1,1))

y_pred1=svr.predict(np.array(x_test).reshape(-1,1))
y_pred= pd.DataFrame(y_pred1)
y_pred

from sklearn import metrics

print('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred))
print('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred))
print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))